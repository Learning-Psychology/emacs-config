;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Wed Jan 14 12:21:01 2015
;; Desktop file format version 206
;; Emacs version 24.3.1

;; Global section:
(setq comint-input-ring nil)
(setq compile-history nil)
(setq desktop-missing-file-warning nil)
(setq dired-regexp-history nil)
(setq extended-command-history '("kill-some-buffers" "shell" "doc-view-set-slice-from-bounding-box" "doc-view-menu" "doc-view-reconvert-doc" "lisp-mode" "slime-mode" "term-mode" "scroll-down" "scroll-up" "doc-view-mode" "github-browse-file" "cider-grimoire-web" "nxml-web-mode" "my-fullscreen" "org-todo" "org-agenda" "scheme-mode" "org-mode" "customize-group" "byte-compile-file" "oicq" "magit-log" "magit-pull" "ibus-mode" "kill-some-buffers" "slime"))
(setq face-name-history nil)
(setq file-name-history '("~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/workspaces/eclipse-workspace/sia3-code/springidol/content.java" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/workspaces/eclipse-workspace/sia3-code/springidol/content.java" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/workspaces/eclipse-workspace/sia3-code/springidol/content.java" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "/home/akitsuki/a-fatelistic-warning/zhazha/Practical Common Lisp(Chinese).pdf" "/home/akitsuki/workspaces/eclipse-workspace/sia3-code/springidol/content.java" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "/home/akitsuki/a-fatelistic-warning/lisp/The Art of the Metaobject Protocol.djvu" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp" "~/a-fatelistic-warning/lisp/The Reasoned Schemer.pdf" "/home/akitsuki/a-fatelistic-warning/lisp/Common Lisp The Language 2nd Edition.pdf" "/home/akitsuki/a-fatelistic-warning/lisp/On Lisp.pdf" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "/home/akitsuki/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "/home/akitsuki/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "/home/akitsuki/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "/usr/share/emacs/24.3/etc/ORDERS" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/on-lisp/onlisp.lisp" "/home/akitsuki/a-fatelistic-warning/lisp/Practical Common Lisp.pdf" "~/github-repos/lisp-practise/on-lisp/notes.lisp" "~/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp" "~/github-repos/lisp-practise/on-lisp/onlisp.lisp" "~/github-repos/lisp-practise/on-lisp/notes.lisp"))
(setq grep-find-history nil)
(setq grep-history nil)
(setq ido-buffer-history '("Practical Common Lisp.pdf" "c24a.lisp" "Practical Common Lisp.pdf" "*slime-repl sbcl*" "*slime-events*" "Practical Common Lisp(Chinese).pdf" "*shell*" "The Art of the Metaobject Protocol.djvu" "binary-data.lisp" "Practical Common Lisp.pdf" "On Lisp.pdf" "lisp" "The Reasoned Schemer.pdf" "Common Lisp The Language 2nd Edition.pdf" "Practical Common Lisp.pdf" "*Help*" "Practical Common Lisp.pdf" "ORDERS" "*info*" "*Help*" "onlisp.lisp" "On Lisp.pdf" "onlisp.lisp" "hosts" "*slime-repl sbcl*" "*slime-events*" "README.md" "*ansi-term*" "Practical Common Lisp.pdf" "ANSI_LISP_‘ÖÐ‘ÎÄ‘Òë‘±¾.pdf" "notes.lisp" "html-generator.lisp" "*slime-repl sbcl*" "notes.lisp" "rapid-dictionary-of-pcl.lisp" "ANSI_LISP_‘ÖÐ‘ÎÄ‘Òë‘±¾.pdf" "*ansi-term*" "ANSI_LISP_‘ÖÐ‘ÎÄ‘Òë‘±¾.pdf" "Practical Common Lisp.pdf" "2014-12-16-chapter23.md" "*slime-repl sbcl*" "2014-12-16-chapter23.md" "spam.lisp" "*ansi-term*" "*inferior-lisp*" "notes.lisp" "spam.lisp —£À c23" "*ansi-term*" "ANSI_LISP_‘ÖÐ‘ÎÄ‘Òë‘±¾.pdf" "notes.lisp" "ANSI_LISP_‘ÖÐ‘ÎÄ‘Òë‘±¾.pdf" "*slime-repl sbcl*" "*About GNU Emacs*" "AUTHORS" "*ansi-term*" "*Help*" ".gitignore" "*Messages*" "*Compile-Log*" "*scratch*" "Practical Common Lisp.pdf" "spam.lisp" "*ansi-term*" "packages.lisp" "notes.scm" "Practical Common Lisp.pdf" "2014-12-13-chapter20.md" "2014-12-12-chapter19.md" "*ansi-term*" "2014-12-08-chapter15.md" "*Messages*" "rapid-dictionary-of-pcl.lisp" "*Help*" "c15a.lisp" "*ansi-term*" "The.Little.Schemer.4th.pdf" "init.el" "*ansi-term*" "notes.scm" "Practical Common Lisp.pdf" "c15a.lisp" "openpyyoudao.sh" "*ansi-term*<2>" "init.el" "c15a.lisp" "init.el" "Practical Common Lisp.pdf" ".bashrc" "*ansi-term*" "c15a.lisp" "Practical Common Lisp.pdf" "*Bookmark List*" "Practical Common Lisp.pdf" "*Bookmark List*" ".gitignore" ".emacs.desktop" "*ansi-term*" "c15a.lisp" "*Compile-Log*" "init.el"))
(setq ido-last-directory-list '(("/home/akitsuki/workspaces/eclipse-workspace/sia3-code/" . "springidol/") ("/home/akitsuki/workspaces/eclipse-workspace/" . "sia3-code/") ("/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/answers/" . "Chapter24/") ("/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/" . "answers/") ("/home/akitsuki/github-repos/schemer-notes/" . "the-little-schemer/") ("/home/akitsuki/development-tools/" . "scripts/") ("/home/akitsuki/a-fatelistic-warning/" . "lisp/") ("/home/akitsuki/github-repos/" . "lisp-practise/") ("/home/akitsuki/a- fatelistic-warning/" . "Lisp/") ("/home/akitsuki/github-repos/lisp-practise/" . "practical-common-lisp/") ("/home/akitsuki/github-repos/eopl-practise/" . "c2-data-abstraction/") ("/home/" . "akitsuki/") ("/home/akitsuki/.emacs.d/" . "lisp/") ("/home/akitsuki/github-repos/github-blog/" . "_posts/") ("/home/akitsuki/github-repos/github-blog/_posts/" . "postcache.md/") ("/home/akitsuki/workspaces/lisp-practise/answers/" . "Chapter08/") ("/home/akitsuki/workspaces/" . "eclipse-workspace/") ("/home/akitsuki/workspaces/lisp-practise/" . "c9/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/org/kuali/student/common/ui/server/" . "start/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/org/kuali/student/common/ui/" . "server/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/org/kuali/student/common/" . "ui/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/org/kuali/student/" . "common/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/org/kuali/" . "student/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/org/" . "kuali/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/" . "org/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/" . "java/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/" . "main/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/" . "src/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/" . "ks-common-ui/") ("/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/" . "ks-common/") ("/home/akitsuki/" . "github-repos/") ("/" . "etc/")))
(setq ido-work-directory-list '("/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/" "/home/akitsuki/a-fatelistic-warning/zhazha/" "/home/akitsuki/workspaces/eclipse-workspace/sia3-code/springidol/" "/home/akitsuki/a-fatelistic-warning/lisp/" "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/c24/" "/home/akitsuki/github-repos/lisp-practise/on-lisp/" "/home/akitsuki/github-repos/book-reviews/" "/home/akitsuki/a-fatelistic-warning/Lisp/" "/home/akitsuki/github-repos/lisp-practise/ansi-common-lisp/" "/home/akitsuki/github-repos/lisp-practise/" "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/answers/Chapter23/" "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/c23/" "/home/akitsuki/.emacs.d/" "/home/akitsuki/github-repos/lisp-practise/c23/" "/home/akitsuki/github-repos/github-blog/_posts/" "/home/akitsuki/github-repos/lisp-practise/c15/" "/home/akitsuki/github-repos/the-schemer-notes/the-little-schemer/" "/home/akitsuki/github-repos/schemer-notes/the-little-schemer/" "/home/akitsuki/development-tools/scripts/" "/home/akitsuki/" "/home/akitsuki/a- fatelistic-warning/Lisp/" "/home/akitsuki/.emacs.d/lisp/" "/home/akitsuki/github-repos/eopl-practise/c2-data-abstraction/" "/home/akitsuki/github-repos/eopl-practise/c1-inductive-sets-of-data/" "/home/akitsuki/development-tools/" "/home/akitsuki/.local/share/applications/" "/home/akitsuki/.emacs.d/templates/" "/home/akitsuki/github-repos/github-blog/" "/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/" "/etc/" "/home/akitsuki/workspaces/lisp-practise/c9/" "/home/akitsuki/workspaces/lisp-practise/answers/Chapter08/" "/home/akitsuki/workspaces/lisp-practise/c8/" "/home/akitsuki/workspaces/ideaProjects/enrollment/aggregate/ks-core/ks-common/ks-common-ui/src/main/java/org/kuali/student/common/ui/server/start/" "/home/akitsuki/Documents/akitsukikiritsugu.github.io/_posts/"))
(setq ido-work-file-list '("binary-data.lisp" "Practical Common Lisp(Chinese).pdf" "content.java" "The Art of the Metaobject Protocol.djvu" "Common Lisp The Language 2nd Edition.pdf" "On Lisp.pdf" "Practical Common Lisp.pdf" "c24a.lisp" "notes.lisp" "onlisp.lisp"))
(setq magit-read-rev-history nil)
(setq minibuffer-history '("350" "348" "347" "275" "/bin/bash" "350" "300" "doc-view-mode" "300" "/bin/bash" "previous-buffer" "/bin/bash" "template" "load-path" "/bin/bash" "misakamikoto" "240799357" "/bin/bash"))
(setq org-clock-history nil)
(setq org-refile-history nil)
(setq org-tags-history nil)
(setq query-replace-history '("gensym" "gensyms" "gensyms" "" "   127.0.0.1" "   127.0.0.1" "" " [ ]" " [ ]" "" "[ ] " "[ ] " "" " [ ]" " [ ]" ".emacs.d/templates" ".templates" ".templates" ".emacs.d/templates" ".template"))
(setq read-expression-history '("q"))
(setq regexp-history nil)
(setq regexp-search-ring nil)
(setq register-alist '((48 . "(in-package :com.gigamonkeys.binary-data)\n\n(defvar *in-progress-objects* nil)\n\n(defconstant +null+ (code-char 0))\n\n(defgeneric read-value (type stream &key)\n  (:documentation \"Read a value of the given type from the stream.\"))\n\n(defgeneric write-value (type stream value &key)\n  (:documentation \"Write a value as the given type to the stream.\"))\n\n(defgeneric read-object (object stream)\n  (:method-combination progn :most-specific-last)\n  (:documentation \"Fill in the slots of object from stream.\"))\n\n(defgeneric write-object (object stream)\n  (:method-combination progn :most-specific-last)\n  (:documentation \"Write out the slots of object to the stream.\"))\n\n(defmethod read-value ((type symbol) stream &key)\n  (let ((object (make-instance type)))\n    (read-object object stream)\n    object))\n\n(defmethod write-value ((type symbol) stream value &key)\n  (assert (typep value type))\n  (write-object value stream))\n\n\n;;; Binary types\n\n(defmacro define-binary-type (name (&rest args) &body spec)\n  (with-gensyms (type stream value)\n  `(progn\n    (defmethod read-value ((,type (eql ',name)) ,stream &key ,@args)\n      (declare (ignorable ,@args))\n      ,(type-reader-body spec stream))\n    (defmethod write-value ((,type (eql ',name)) ,stream ,value &key ,@args)\n      (declare (ignorable ,@args))\n      ,(type-writer-body spec stream value)))))\n\n(defun type-reader-body (spec stream)\n  (ecase (length spec)\n    (1 (destructuring-bind (type &rest args) (mklist (first spec))\n         `(read-value ',type ,stream ,@args)))\n    (2 (destructuring-bind ((in) &body body) (cdr (assoc :reader spec))\n         `(let ((,in ,stream)) ,@body)))))\n\n(defun type-writer-body (spec stream value)\n  (ecase (length spec)\n    (1 (destructuring-bind (type &rest args) (mklist (first spec))\n         `(write-value ',type ,stream ,value ,@args)))\n    (2 (destructuring-bind ((out v) &body body) (cdr (assoc :writer spec))\n         `(let ((,out ,stream) (,v ,value)) ,@body)))))\n\n\n;;; Binary classes\n\n(defmacro define-generic-binary-class (name (&rest superclasses) slots read-method)\n  (with-gensyms (objectvar streamvar)\n    `(progn\n       (eval-when (:compile-toplevel :load-toplevel :execute)\n         (setf (get ',name 'slots) ',(mapcar #'first slots))\n         (setf (get ',name 'superclasses) ',superclasses))\n       \n       (defclass ,name ,superclasses\n         ,(mapcar #'slot->defclass-slot slots))\n       \n       ,read-method\n       \n       (defmethod write-object progn ((,objectvar ,name) ,streamvar)\n         (declare (ignorable ,streamvar))\n         (with-slots ,(new-class-all-slots slots superclasses) ,objectvar\n           ,@(mapcar #'(lambda (x) (slot->write-value x streamvar)) slots))))))\n\n(defmacro define-binary-class (name (&rest superclasses) slots)\n  (with-gensyms (objectvar streamvar)\n    `(define-generic-binary-class ,name ,superclasses ,slots\n       (defmethod read-object progn ((,objectvar ,name) ,streamvar)\n         (declare (ignorable ,streamvar))\n         (with-slots ,(new-class-all-slots slots superclasses) ,objectvar\n           ,@(mapcar #'(lambda (x) (slot->read-value x streamvar)) slots))))))\n\n(defmacro define-tagged-binary-class (name (&rest superclasses) slots &rest options)\n  (with-gensyms (typevar objectvar streamvar)\n    `(define-generic-binary-class ,name ,superclasses ,slots\n      (defmethod read-value ((,typevar (eql ',name)) ,streamvar &key)\n        (let* ,(mapcar #'(lambda (x) (slot->binding x streamvar)) slots)\n          (let ((,objectvar\n                 (make-instance \n                  ,@(or (cdr (assoc :dispatch options))\n                        (error \"Must supply :disptach form.\"))\n                  ,@(mapcan #'slot->keyword-arg slots))))\n            (read-object ,objectvar ,streamvar)\n            ,objectvar))))))\n\n(defun as-keyword (sym) (intern (string sym) :keyword))\n\n(defun normalize-slot-spec (spec)\n  (list (first spec) (mklist (second spec))))\n\n(defun mklist (x) (if (listp x) x (list x)))\n\n(defun slot->defclass-slot (spec)\n  (let ((name (first spec)))\n    `(,name :initarg ,(as-keyword name) :accessor ,name)))\n\n(defun slot->read-value (spec stream)\n  (destructuring-bind (name (type &rest args)) (normalize-slot-spec spec)\n    `(setf ,name (read-value ',type ,stream ,@args))))\n\n(defun slot->write-value (spec stream)\n  (destructuring-bind (name (type &rest args)) (normalize-slot-spec spec)\n    `(write-value ',type ,stream ,name ,@args)))\n\n(defun slot->binding (spec stream)\n  (destructuring-bind (name (type &rest args)) (normalize-slot-spec spec)\n    `(,name (read-value ',type ,stream ,@args))))\n\n(defun slot->keyword-arg (spec)\n  (let ((name (first spec)))\n    `(,(as-keyword name) ,name)))\n\n;;; Keeping track of inherited slots\n\n(defun direct-slots (name)\n  (copy-list (get name 'slots)))\n\n(defun inherited-slots (name)\n  (loop for super in (get name 'superclasses)\n        nconc (direct-slots super)\n        nconc (inherited-slots super)))\n\n(defun all-slots (name)\n  (nconc (direct-slots name) (inherited-slots name)))\n\n(defun new-class-all-slots (slots superclasses)\n  \"Like all slots but works while compiling a new class before slots\nand superclasses have been saved.\"\n  (nconc (mapcan #'all-slots superclasses) (mapcar #'first slots)))\n\n;;; In progress Object stack\n\n(defun current-binary-object ()\n  (first *in-progress-objects*))\n\n(defun parent-of-type (type)\n  (find-if #'(lambda (x) (typep x type)) *in-progress-objects*))\n\n(defmethod read-object :around (object stream)\n  (declare (ignore stream))\n  (let ((*in-progress-objects* (cons object *in-progress-objects*)))\n    (call-next-method)))\n\n(defmethod write-object :around (object stream)\n  (declare (ignore stream))\n  (let ((*in-progress-objects* (cons object *in-progress-objects*)))\n    (call-next-method)))\n")))
(setq search-ring '("read-value" "play" "spam-brob" "xm" "inputMethodQuery" "ctl-x" "\"t\"" "TEMPLATE." "mode" "templatess" ".template" "path" "linktext" "bookmarkui" "bookmark" "headerText"))
(setq shell-command-history '("wc -l" "wc -c" "wc -l"))
(setq tags-file-name nil)
(setq tags-table-list nil)

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 206
  "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/answers/Chapter24/binary-data.lisp"
  "binary-data.lisp"
  'lisp-mode
  '(anzu-mode auto-complete-mode global-auto-revert-mode whitespace-cleanup-mode undo-tree-mode page-break-lines-mode whole-line-or-region-mode hes-mode guide-key-mode auto-compile-on-load-mode eldoc-mode goto-address-prog-mode paredit-mode bug-reference-prog-mode diff-hl-mode highlight-symbol-mode slime-mode rainbow-delimiters-mode aggressive-indent-mode redshank-mode)
  5742
  '(5742 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix) (overwrite-mode)))

(desktop-create-buffer 206
  "/home/akitsuki/github-repos/lisp-practise/practical-common-lisp/c24/c24a.lisp"
  "c24a.lisp"
  'lisp-mode
  '(anzu-mode auto-complete-mode global-auto-revert-mode whitespace-cleanup-mode undo-tree-mode page-break-lines-mode whole-line-or-region-mode hes-mode guide-key-mode auto-compile-on-load-mode eldoc-mode goto-address-prog-mode paredit-mode bug-reference-prog-mode diff-hl-mode highlight-symbol-mode slime-mode rainbow-delimiters-mode aggressive-indent-mode redshank-mode)
  3913
  '(3882 nil)
  nil
  nil
  '((buffer-file-coding-system . utf-8-unix) (overwrite-mode)))

(desktop-create-buffer 206
  "/home/akitsuki/github-repos/lisp-practise/on-lisp/notes.lisp"
  "notes.lisp"
  'lisp-mode
  '(anzu-mode auto-complete-mode global-auto-revert-mode whitespace-cleanup-mode undo-tree-mode page-break-lines-mode whole-line-or-region-mode hes-mode guide-key-mode auto-compile-on-load-mode eldoc-mode goto-address-prog-mode paredit-mode bug-reference-prog-mode diff-hl-mode highlight-symbol-mode slime-mode rainbow-delimiters-mode aggressive-indent-mode redshank-mode)
  294
  '(294 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix) (overwrite-mode)))

